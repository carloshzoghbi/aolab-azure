# This file establishes the necessary resources on Azure to create a Demo Webserver using Ubuntu
#
#
- name: Create Ubuntu Server + Docker + Apps
  hosts: localhost
  vars:
    local_ip: "nada-none"
    date: "{{ lookup('pipe', 'date +%Y%m%d') }}"
  vars_files:
    - ./config.yml

  tasks:
  
    - name: STARTING NOW ...
      debug: msg="Starting now @ {{ lookup('pipe', 'date "+%Y-%m-%d %H:%M:%S"') }}"
      
    - name: Getting your Public IP Address
      local_action:
        module: uri
        url: http://checkip.amazonaws.com
        return_content: yes
      register: local_ip
      failed_when: not local_ip.content | regex_search ('(\d+).(\d+).(\d+).(\d+)\n')

    # Allow access from /24 instead of /32 host
    - name: Set Public Network Variable
      set_fact:
        ALLOWED_SRC_ADDRESS: "{{ local_ip.content | ipsubnet (24,0) }}"
        #ALLOWED_SRC_ADDRESS: "{{ local_ip.content | ipaddr ('host') }}"

    - name: Your Public IP Net for allowed Inbound traffic
      debug: var=ALLOWED_SRC_ADDRESS
      
    - name: Create Resource Group {{ RESOURCE_GROUP }}
      azure_rm_resourcegroup:
        tenant: "{{ TENANT_ID }}"
        client_id: "{{ CLIENT_ID}}"
        secret: "{{ SERVICE_PRINCIPAL_SECRET }}"
        subscription_id: "{{ SUBSCRIPTION_ID }}"
        name: "{{ RESOURCE_GROUP }}"
        location: "{{ DEFAULT_LOCATION }}"

    - name: Create Virtual Network {{ VNET1 }}
      azure_rm_virtualnetwork:
        tenant: "{{ TENANT_ID }}"
        client_id: "{{ CLIENT_ID}}"
        secret: "{{ SERVICE_PRINCIPAL_SECRET }}"
        subscription_id: "{{ SUBSCRIPTION_ID }}"
        resource_group: "{{ RESOURCE_GROUP }}"
        name: "{{ VNET1 }}"
        address_prefixes: "10.1.0.0/16"

    - name: Add Subnet {{ VNET_SUBNET1 }} to VNET {{ VNET1 }}
      azure_rm_subnet:
        tenant: "{{ TENANT_ID }}"
        client_id: "{{ CLIENT_ID}}"
        secret: "{{ SERVICE_PRINCIPAL_SECRET }}"
        subscription_id: "{{ SUBSCRIPTION_ID }}"
        resource_group: "{{ RESOURCE_GROUP }}"
        name: "{{ VNET_SUBNET1 }}"
        address_prefix: "10.1.10.0/24"
        virtual_network: "{{ VNET1 }}"

    - name: Create Storage Account sa{{ STUDENT_ID }}{{ date }} in Resource Group {{ RESOURCE_GROUP }}
      azure_rm_storageaccount:
        tenant: "{{ TENANT_ID }}"
        client_id: "{{ CLIENT_ID}}"
        secret: "{{ SERVICE_PRINCIPAL_SECRET }}"
        subscription_id: "{{ SUBSCRIPTION_ID }}"
        location: "{{ DEFAULT_LOCATION }}"
        resource_group: "{{ RESOURCE_GROUP }}"
        name: "sa{{ STUDENT_ID }}{{ date }}"
        account_type: Standard_LRS

    - name: Edit {{ NODE_NAME }}-{{ STUDENT_ID }}-sg0 Security Group in Resource Group {{ RESOURCE_GROUP }} (Allow DATA and Access)
      azure_rm_securitygroup:
          tenant: "{{ TENANT_ID }}"
          client_id: "{{ CLIENT_ID}}"
          secret: "{{ SERVICE_PRINCIPAL_SECRET }}"
          subscription_id: "{{ SUBSCRIPTION_ID }}"
          resource_group: "{{ RESOURCE_GROUP }}"
          name: "{{ NODE_NAME }}-{{ STUDENT_ID }}-sg0"
          purge_rules: yes
          rules:
              - name: 'Allow_SSH'
                protocol: Tcp
                source_address_prefix: '{{ ALLOWED_SRC_ADDRESS }}'
                destination_port_range: 22
                access: Allow
                priority: 100
                direction: Inbound
              - name: 'Allow_HTTP_80'
                protocol: Tcp
                source_address_prefix: '{{ ALLOWED_SRC_ADDRESS }}'
                destination_port_range: 80
                access: Allow
                priority: 101
                direction: Inbound
              - name: 'Allow_HTTPS_443'
                protocol: Tcp
                source_address_prefix: '{{ ALLOWED_SRC_ADDRESS }}'
                destination_port_range: 443
                access: Allow
                priority: 102
                direction: Inbound                
              - name: 'Allow_TCP_8080_to_8089'
                protocol: Tcp
                source_address_prefix: '{{ ALLOWED_SRC_ADDRESS }}'
                destination_port_range: 8080-8089
                access: Allow
                priority: 103
                direction: Inbound
              - name: 'Allow_TCP_8443'
                protocol: Tcp
                source_address_prefix: '{{ ALLOWED_SRC_ADDRESS }}'
                destination_port_range: 8443
                access: Allow
                priority: 104
                direction: Inbound

    - name: Create {{ NODE_NAME }}-{{ STUDENT_ID }}-int-nic0 internal NIC with Security Group {{ NODE_NAME }}-{{ STUDENT_ID }}-sg0
      azure_rm_networkinterface:
        tenant: "{{ TENANT_ID }}"
        client_id: "{{ CLIENT_ID}}"
        secret: "{{ SERVICE_PRINCIPAL_SECRET }}"
        subscription_id: "{{ SUBSCRIPTION_ID }}"
        location: "{{ DEFAULT_LOCATION }}"
        resource_group: "{{ RESOURCE_GROUP }}"
        security_group: "{{ NODE_NAME }}-{{ STUDENT_ID }}-sg0"
        name: "{{ NODE_NAME }}-{{ STUDENT_ID }}-int-nic0"
        virtual_network: "{{ VNET1 }}"
        subnet: "{{ VNET_SUBNET1 }}"
        ip_configurations:
          - name: ipconfig1
            private_ip_allocation_method: Static
            private_ip_address: "{{ NODE_ADDRESS }}"
            public_ip_address_name: "{{ NODE_NAME }}-{{ STUDENT_ID }}-int-pip0"

    - name: Create {{ NODE_NAME }}-{{ STUDENT_ID }} Virtual Machine
      azure_rm_virtualmachine:
        tenant: "{{ TENANT_ID }}"
        client_id: "{{ CLIENT_ID}}"
        secret: "{{ SERVICE_PRINCIPAL_SECRET }}"
        subscription_id: "{{ SUBSCRIPTION_ID }}"
        location: "{{ DEFAULT_LOCATION }}"
        resource_group: "{{ RESOURCE_GROUP }}"
        name: "{{ NODE_NAME }}-{{ STUDENT_ID }}"
        vm_size: Standard_B2ms
        storage_account: "sa{{ STUDENT_ID }}{{ date }}"
        storage_container: "{{ NODE_NAME }}{{ STUDENT_ID }}"
        storage_blob: "{{ NODE_NAME }}{{ STUDENT_ID }}.vhd"
        admin_username: "{{ NODE_USER }}"
        admin_password: "{{ NODE_PASSWORD }}"
        network_interfaces: "{{ NODE_NAME }}-{{ STUDENT_ID }}-int-nic0"
        append_tags: True
        tags:
          OperatingSystem: "Ubuntu"
          OperatingSystemVersion: "18.04-LTS"
          Applications: "All"
        image:
          offer: UbuntuServer
          publisher: Canonical
          sku: 18.04-LTS
          version: latest

    - name: Run init script for docker and dependencies
      azure_rm_virtualmachineextension:
        location: "{{ DEFAULT_LOCATION }}"
        resource_group: "{{ RESOURCE_GROUP }}"
        name: server_onboarding
        virtual_machine_name: "{{ NODE_NAME }}-{{ STUDENT_ID }}"
        publisher: Microsoft.Azure.Extensions
        virtual_machine_extension_type: CustomScript
        type_handler_version: 2.0
        #settings: '{"commandToExecute": "sudo apt-get update ; sudo apt-get install -y docker docker-compose ; sudo docker run --name hackazon --restart unless-stopped -d -p 8080:80 -p 8443:443 ianwijaya/hackazon ; sudo docker run --name nginx01 --restart=unless-stopped -d -p 8081:80 nginx:latest; sudo docker run --name dvwa --restart unless-stopped -d -p 8082:80 vulnerables/web-dvwa; sudo docker run --name f5helloworld --restart unless-stopped -d -p 8083:8080 f5devcentral/f5-hello-world; sudo docker run --name juice-shop --restart=unless-stopped -d -p 8084:3000 bkimminich/juice-shop "}'
        settings: '{"fileUris": ["https://raw.githubusercontent.com/cavalen/aolab-azure/master/script/config_server.sh"], "commandToExecute": "sh config_server.sh"}'
        auto_upgrade_minor_version: true

    - debug: msg="Finishing ... @ {{ lookup('pipe', 'date "+%Y-%m-%d %H:%M:%S"') }}"
